<HTML>
<HEAD>
<TITLE>_open</TITLE>
</HEAD>
<BODY>

<font face="verdana,arial,helvetica" size="2">
<H2>_open</H2>

<P>Open a file.</P>

<P><B>int _open (char * </B><I>filename</I><B>, int </B><I>open_flags</I>[<B>, int </B><I>permission_flags</I>[<B>, char * </B><I>dcb</I>]]<B>);</B></P>
<P><B>int open (char * </B><I>filename</I><B>, int </B><I>open_flags</I>[<B>, int </B><I>permission_flags</I>[<B>, char * </B><I>dcb</I>]]<B>);</B></P>

<TABLE border=1 cellpadding=5 cols=1 frame=below rules=rows>

<TR VALIGN="top">
<TD width=100%><B>Required Header</B></TD>
</TR>

<TR VALIGN="top">
<TD width=100%>&lt;io.h&gt;</TD>
</TR>

</TABLE><BR>

<P><B>Return Value</B></P>

<P>Each of these functions returns a new handle to the open file. -1 indicates an error.</P>

<P><B>Parameters</B></P>

<P><I>filename</I></P>

<P>&nbsp;&nbsp;The filename of the file to open</P>

<P><I>open_flags</I></P>

<P>&nbsp;&nbsp;The flags used to determine which mode to open the file in</P>

<P><I>permission_flags</I></P>

<P>&nbsp;&nbsp;Included for backwards compatability, not otherwise used</P>

<P><I>dcb</I></P>

<P>&nbsp;&nbsp;A string specifing dcb defaults, used if the system cannot determine them</P>

<P><B>Remarks</B></P>

<P>The <B>_open</B> function opens the file specified by <I>filename</I> in the mode determined by
the <I>open_flags</I> which specify read, write, append, binary or text.  The allowable open flags
are:<p>

<code><pre>O_APPEND or _O_APPEND  Appends to the end of the file
O_BINARY or _O_BINARY  Opens the file in non-translated mode
O_CREAT  or _O_CREAT   Creates the file if one does not already exist
O_EXCL   or _O_EXCL    Prevent existing files from being overwritten
O_RDONLY or _O_RDONLY  Opens the file in read only mode
O_RDWR   or _O_RDWR    Opens the file in read/write mode
O_TEXT   or _O_TEXT    Opens the file in text-translated mode (Ignored for HFS files)
O_TRUNC  or _O_TRUNC   The default file write only mode, erases its content first
O_WRONLY or _O_WRONLY  Opens the file in write only mode
</pre></code>

<b>O_BINARY</b> or <b>O_TEXT</b> can be used to open <b>_O_RDWR</b> read/write files, but where VB files with a lrecl less
than blksize-4 are not supported with errno set to <b>EACCES</b>.  There are no record delimiters used in read/write
mode and every block written will be full (including the last block) which prevents easy file-size control.  The last
block is padded with nulls or spaces (bin/txt) when the file is closed.  A PDS member can be updated, but not extended
after it is first closed and <b>_O_APPEND</b> cannot be used at all with a member.<p>

Text translation mode otherwise only effects the operation of Fixed-record file processing, by padding incomplete
records (delimited by a newline character) with spaces when writing, and appending a newline to the 'trimmed'
record when reading.  When binary-mode fixed-records are written, an incomplete record (delimited by closing
the file) is padded with binary zeros.  In Variable-record processing, a newline is added to the end of every
record read regardless of the mode the file was open with.  A newline always specifies the end of a record
being written.  The actual file content never contains a newline character.  Undefined-record processing
returns a special two-byte short integer at the begining of each record to specify the record length, likewise
the same two bytes should be passed to the write routine to specify the length of a new record.<p>

<b>extern int _vmode;</b> may be defined and set to value 1 to enable V[B] file types to use and return
the same half-word length in the data stream (like Undefined-record processing) to allow newlines and other binary
information to be physically read and written.  Only Binary non-translated mode opened files check <b>_vmode</b>.
File positioning using seek is effected by the <b>_vmode</b> setting.  A value of 2 will prevent newlines
from being added or used as record boundaries.<p>

<b>extern int _umode;</b> may be defined and set to a zero value so U file types do not require or return a length
indicator for records.  Each record written will be the maximum blocksize, except the last which can be smaller.<p>

See <a target="appl" href="filemodes.htm">file modes</a> for more detailed information.<p>

When using a <I>dcb</I> string it is neccessary to also have a dummy <I>permission_flags</I> value
and also include the special <I>open_flags</I> value <B>_O_ATTRS</B>.  The <i>dcb</i> string can be
made up from the following optional components:<p>

<code><pre>"recfm=u|f[b]|v[b],blksize=x,lrecl=y,klen=z"
</pre></code>

Where x, y and z are the required DCB values.  <b>HFS</b> files never use the extra attributes.<p>

To force these values into the DCB before the open service is issued, use an extra string component: ",force"<p>

A VTOC can be opened by specifying ",vtoc" where the disk accessed is that where the DD or DSN is located.  If no
<I>filename</I> is specified, ie. an empty string, extra components "volser=..." and "unit=..." need to be added to
locate the desired disk.  Only the 96 non-key bytes from each vtoc entry are read by JCC.  The open mode must be
set to read binary for the function to succeed.<p>

The <i>dcb</i> string can also specify ",vmode=0|1|2" and/or ",umode=0|1" to localise the effect on file-processing.<p>

The <I>filename</I> may be preceeded by a style ("//DDN:", "//DSN:" or "//HFS:") to specify which library routines
should be used to access the file.  A filename starting with a single "/" is assumed to be <b>HFS</b>.<p>

<b>_style</b>, described in the <a target="appl" href="library.htm">JCC Library</a>, determines the default file
style for opening files.  This is a character pointer which by default points to "//DDN:" and which may be altered
to point to a user defined string specifying "//DSN:" or "//HFS:" if that default style is desired.
<b>extern char * _style;</b> needs to be defined before doing this.<p>

When <B>O_CREAT</b> is specified for a PS (memberless) DSN style dataset, the following <i>dcb</i> values may also
be used:<p>

<code><pre>"volser=vvvvvv,unit=uuuuuu,pri=mmm,sec=nnn,rlse"
</pre></code>

Which specify the placement and size of a newly created PS dataset.  These values are only used when the dataset
doesn't already exist, <i>volser</i>, <i>sec</i> and <i>rlse</i> are optional - both <i>recfm</i> and <i>blksize</i> must be
specified to create a new dataset.  Space is allocated in track (TRK) units.<p>

<b>New</b> open processing allows uncatalogued files to be opened by using both volser= and unit= values and the new
",notcat" value.  The file will not be found/opened if it does not exist on the volume specified, even if it is
catalogued.  There is also a new value ",dontcat" which prevents newly created datasets from being catalogued.<p>

A PDS can be created by additionally specifying the value ",dirblks=" with your desired value.  Although write binary
must be issued for the creation to take place, the actual resulting file is finally opened in read binary ready to
allow listing the empty PDS directory.  You cannot open a PDS in write mode without a member name.<p>

DSN filenames starting with "&&" are created when opened for the first time, and deleted when the JCC compiled
program ends.  1000 temporary files may be created in this way per JCC program, although only 256 files may
be open at the same time.  Once a "//DSN:&&DSNAME" temporary file has been created, it may be opened and closed
as many times as needed by the running program.  Unlike JCL, use the same filename to (re)access the same temporary
file.<p>

To use a temporary file with another program in the same address-space, you may obtain the internal DD name
used for the temp file with the int __get_tmpddn (char * tmpnam, char * ddn9) function.  tmpnam would be "&&DSNAME"
and ddn9 would be your char array (of length 9) to accept the resulting unpadded null-terminated ddname string.  The
function returns 1 when a name was copied into your buffer, and 0 on failure to locate the file.<p>

The <b>DD, DSN, Member and Volume-Serial</b> names of any open JCC dataset can be obtained by using the special function:<p>

<code><pre>int __get_ddndsnmemb (int handle, char * ddn, char * dsn,
                     char * member, char * serial, unsigned char * flags);
</pre></code>

Where member will be set to an empty string if the file is sequential.  If the device is a terminal, serial will also
be set to an empty string and dsn will be set to "TERMFILE".  You may pass NULL for any of the (u)char * parameters if
you are not interested in that particular value.  Space must exist in your buffers for returning the longest possible
results for each value, plus a null terminator.  That's 9, 45, 9 and 7 bytes for the first 4 parameters respectively.
The flags returned need an 11 byte area and include the following information from the JFCB:<p>

TSDM : Offset 0, 1 byte.<br>
IND1/2 : Offset 1, 2 bytes.<br>
KEYLEN : Offset 3, 1 byte.<br>
DSORG : Offset 4, 2 bytes.<br>
RECFM : Offset 6, 1 byte.<br>
BLKSIZE: Offset 7, 2 bytes.<br>
LRECL: Offset 9, 2 bytes.<p>

A return value of -1 indicates an error prevented any values from being returned, 0 indicates successful execution.
<b>HFS</b> files are not supported.  <b>Hint:</b> Use the fileno function to obtain a handle from a stream to use with
this function.<p>

Memory files are now supported by the JCC library.  Use a style or prefix of //MEM: to create a new or access an existing memory
file.  Note that only the current JCC program will have access to a memory file, you cannot access a memory file created within
one JCC program from another JCC program even if the second JCC program was executed by the first.  You cannot remove, unlink or
rename a memory file once it is created.  You can however release all memory used by a memory file by reopening it with the
O_TRUNC parameter flag.  Only standard heap memory can be used for memory files in JCC.  Text mode has no meaning for memory files
in the JCC library and access is always read/write regardless of what is specified in the open flags.<p>

<P><a target="appl" href="ioh.htm">Low Level I/O</a></P>

<P><B>See Also</B>&nbsp;&nbsp;&nbsp;
<a target="appl" href="_close.htm">_close</a>,
<a target="appl" href="_dup.htm">_dup</a>,
<a target="appl" href="_dup2.htm">_dup2</a>,
<a target="appl" href="fopen.htm">fopen</a>,
<a target="appl" href="__getdcb.htm">__getdcb</a>,
<a target="appl" href="remove.htm">remove</a>,
<a target="appl" href="_unlink.htm">_unlink</a>
</P>

</font>
</BODY>
</HTML>
