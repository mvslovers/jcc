<html>
<body>
<font face="verdana,arial,helvetica" size="2">

<h2><center>JCC Help.</center></h2>

JCC is an ANSI compliant C Compiler that generates '370 assembly language.<p>

JCC uses the JCC-Library which has optimisations for '390 processors which are
automatically switched on when running on that equipment.  For Hercules users
running MVS3.8j who have compiled Hercules with 390 extensions-enabled, there
is a global variable to allow manual switching to the faster library code.<p>

<hr>

<h3><u>Utilities that come with JCC:</u></h3><p>

<b>asmscan</b> - Replaces identifiers in assembly listings with STnnnnn where n is a unique
5 digit number.  This has the effect of allowing long-names within C programs to be assembled
with older assemblers.  <B>ALIAS</B> statements are also no longer required, and are removed
along with <B>AMODE</B> & <B>RMODE</B> directives.<p>

A mapping file is generated by asmscan to allow the new short names to be remapped back
to their original names.  It is intended to be used as input to <b>objscan</b>.<p>

<B>Warning:</B> To use this utility, the source file must not contain global variables or
function names in this list ['STnnnnn', 'ENTRY', 'A', 'C', 'DL8', 'E', 'F', 'H', 'V' or 'X']
which are <b>asmscan</b> specific or assembler-codes generated for data definitions.
Lowercase versions are accepted.  Changes to <b>asmscan</b> may allow some support.<p>

<pre><code>Usage: asmscan input.asm output.asm output.nam
 Converts longnames to shortnames and creates a translation file.
</code></pre>

<b>objscan</b> - Takes an older ESD style object and replaces ESD records with XSD records,
based on a mapping file.  This produces a new object which can contain both short names
and long names for correct linker name resolving.

<pre><code>Usage: objscan input.obj input.nam output.obj
 Takes a pre-built name file and converts ESDs to XSDs
</code></pre>

<b>prelink</b> - Combines a list of source objects into a single target object, using a
directory of library objects for automatic name resolution.  The library directory must
contain a plain text file listing the object filenames within the library directory and
in the order of resolution desired.<p>

The JCC-Library supplies both the objects and plain text file.  The library may be updated
by adding new objects to both the directory and the text file.<p>

Options to rename external indentifiers enable older linkers to build the resulting object
into a LoadLibrary member.  The options are: to replace all names with STnnnnnn where n is
a unique 6 digit number, replace only the long-names (longer than 8 characters) or replace
no names at all (just combining the required objects into a normal XSD object.)<p>

Once processed, the entry point may become <b>ST000000</b> instead of <b>@crt0</b> (or <B>@@CRT0</B>)
if the linker needs to be given that option.  Also, both <b>prelink</b> and <b>objscan</b> reidentify
the objects processed as AMODE=ANY, RMODE=ANY leaving the final decision up to the linker.<p>

<pre><code>Usage: prelink -test=file -r|s|x libdir target.obj user1.obj...
 All parameters are position specific and only the flags are optional,
 -test=file appends debugging information to the JCC test file.
 -r renames all symbols to STnnnnnn to hide their meanings,
 -s performs the default function of only renaming longnames,
 -x performs no renames at all, and leaves XSD records as-is.
 libdir must contain the file liblst.txt listing all objects.
 Additionally, libdir may be specified as 'nolib' to exclude the library.
 user1.obj may be replaced with -file.txt which lists all the user objects.
</code></pre>

<font>
</body>
</html>
